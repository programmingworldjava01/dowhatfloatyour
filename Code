import java.io.*;
import java.net.*;

public class Server {
    public static void main(String[] args) {
        int port = 5000;

        try (ServerSocket serverSocket = new ServerSocket(port)) {
            System.out.println("Server started on port " + port);

            while (true) {
                Socket socket = serverSocket.accept();
                new Thread(() -> handleClient(socket)).start();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void handleClient(Socket socket) {
        try (DataInputStream dis = new DataInputStream(socket.getInputStream())) {
            while (true) {
                int fileNameLength = dis.readInt();
                if (fileNameLength <= 0) break;

                byte[] fileNameBytes = new byte[fileNameLength];
                dis.readFully(fileNameBytes);
                String fileName = new String(fileNameBytes);

                long fileSize = dis.readLong();
                File outputFile = new File("received_" + fileName);
                FileOutputStream fos = new FileOutputStream(outputFile);

                byte[] buffer = new byte[4096];
                int read;
                long remaining = fileSize;

                while ((read = dis.read(buffer, 0, (int) Math.min(buffer.length, remaining))) > 0) {
                    fos.write(buffer, 0, read);
                    remaining -= read;
                    if (remaining == 0) break;
                }
                fos.close();

                System.out.println("Received file: " + fileName);
            }

        } catch (IOException e) {
            System.out.println("Client disconnected or error: " + e.getMessage());
        }
    }
}
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.nio.file.Files;

public class Client extends JFrame {
    private JTextArea logArea;
    private JButton selectButton, sendButton;
    private File[] selectedFiles;

    public Client() {
        setTitle("Multi File Sender");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        selectButton = new JButton("Select Files");
        sendButton = new JButton("Send Files");

        logArea = new JTextArea();
        logArea.setEditable(false);

        selectButton.addActionListener(e -> chooseFiles());
        sendButton.addActionListener(e -> new Thread(() -> sendFiles()).start());

        JPanel topPanel = new JPanel();
        topPanel.add(selectButton);
        topPanel.add(sendButton);

        add(topPanel, BorderLayout.NORTH);
        add(new JScrollPane(logArea), BorderLayout.CENTER);
    }

    private void chooseFiles() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true);
        int option = fileChooser.showOpenDialog(this);

        if (option == JFileChooser.APPROVE_OPTION) {
            selectedFiles = fileChooser.getSelectedFiles();
            logArea.append("Selected " + selectedFiles.length + " file(s)\n");
        }
    }

    private void sendFiles() {
        if (selectedFiles == null || selectedFiles.length == 0) {
            logArea.append("No files selected!\n");
            return;
        }

        try (Socket socket = new Socket("localhost", 5000);
             DataOutputStream dos = new DataOutputStream(socket.getOutputStream())) {

            for (File file : selectedFiles) {
                byte[] fileNameBytes = file.getName().getBytes();
                byte[] fileData = Files.readAllBytes(file.toPath());

                dos.writeInt(fileNameBytes.length);
                dos.write(fileNameBytes);
                dos.writeLong(fileData.length);
                dos.write(fileData);

                logArea.append("Sent: " + file.getName() + "\n");
            }

            // Send 0 to signal end of transfer
            dos.writeInt(0);

        } catch (IOException e) {
            logArea.append("Error: " + e.getMessage() + "\n");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new Client().setVisible(true));
    }
}
